"""
Сложность  O(n) т.к имеет 2 не вложенных цикла, завиящих от длины задаваемого массива.
Функция проходится по всей длине с ценами, в котором проверяется, равна-ли разность предыдущей цены и цены цикла единице.
Если равна, то к переменной dex прибавляем единицу, если не равна единице, то к добавляем значение
переменной dex, а саму переменную сбрасываем в исходное состояние тоесть 1
Далее цикл, проходящий по  списку прибавляет к переменной результата, уже результат выполнения половины от
сложения единицы с значением цикла, умножение на это же самое значение
"""

def getDescentPeriods(full):
    result = 0
    dex = 1
    lst = []
    for i in range(1, len(full)):      # Цикл проходит по длине массива
        if full[i-1] - full[i] == 1: # Если из предыдущего массива отнимаем следующий и он равен единице, то...
            dex += 1                     # к переменной dex прибавляем единицу
        else:
            lst.append(dex)              # Иначе к списку добавляем это значение и...
            cur = 1                      # переменной cur присваиваем единицу
    lst.append(dex)                      # К итоговому списку прибавляем остаточное значение переменной cur
    for j in lst:                        # Цикл проходящий по получившемуся списку
        result += ((1 + j) * j) // 2     # К результату прибавляем сумму 1 и значение списка умноженное на то же значение
    return result                        #  Дальше делим все на 2

print(getDescentPeriods([4,2,6,1]))
